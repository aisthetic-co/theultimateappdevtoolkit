/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type CustomCta = {
  _type: "customCta";
  ctaLabel?: string;
  ctaLink?: Link;
  ctaColour?: "black" | "white";
};

export type RichText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    _key: string;
  } & Link>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Link = {
  _type: "link";
  internalLink?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  externalLink?: string;
};

export type Content = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  _key: string;
} & CustomImage | {
  _key: string;
} & CustomVideo | {
  _key: string;
} & Media>;

export type Media = {
  _type: "media";
  mediaType?: "image" | "video";
  image?: CustomImage;
  video?: CustomVideo;
};

export type CustomVideo = {
  _type: "customVideo";
  desktopVideo?: {
    videoFile?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      _type: "file";
    };
    width?: number;
    height?: number;
  };
  mobileVideo?: {
    videoFile?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      _type: "file";
    };
    width?: number;
    height?: number;
  };
  showMuteIcon?: boolean;
  cropVideoForMobile?: boolean;
};

export type CustomImage = {
  _type: "customImage";
  desktopImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  mobileImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  caption?: string;
  isLCP?: boolean;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  isHomePage?: boolean;
  slug?: Slug;
  metaData?: PageMetaData;
  content?: Content;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Footer = {
  _id: string;
  _type: "footer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  Field1?: string;
  Field2?: string;
};

export type Navigation = {
  _id: string;
  _type: "navigation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  Field1?: string;
  Field2?: string;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  metaData?: PageMetaData;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type PageMetaData = {
  _type: "pageMetaData";
  title?: string;
  description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  metadataBase?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | Geopoint | CustomCta | RichText | Link | Content | Media | CustomVideo | CustomImage | Page | SanityFileAsset | Slug | Footer | Navigation | Settings | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | PageMetaData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  metaData?: PageMetaData;
} | null;
// Variable: navigationQuery
// Query: *[_type == "navigation"][0]
export type NavigationQueryResult = {
  _id: string;
  _type: "navigation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  Field1?: string;
  Field2?: string;
} | null;
// Variable: footerQuery
// Query: *[_type == "footer"][0]
export type FooterQueryResult = {
  _id: string;
  _type: "footer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  Field1?: string;
  Field2?: string;
} | null;
// Variable: homePageQuery
// Query: *[_type == "page" && isHomePage == true][0] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "date": coalesce(date, _updatedAt),  "slug": slug.current,  isHomePage,  content[]{    ...,    _type == 'customImage' => {     ...,          "desktopImage":{      "imageUrl": desktopImage.asset->url,      "imageDimensions": desktopImage.asset->metadata.dimensions  },  "mobileImage":{      "imageUrl": mobileImage.asset->url,      "imageDimensions": mobileImage.asset->metadata.dimensions  },  isLCP,  caption    },    _type == 'customVideo' => {     ...,       "desktopVideo":{      "videoUrl": desktopVideo.videoFile.asset->url,      "videoDimensions": {          "width":desktopVideo.width,          "height":desktopVideo.height,      }  },  "mobileVideo":{     "videoUrl": mobileVideo.videoFile.asset->url,     "videoDimensions": {          "width":mobileVideo.width,          "height":mobileVideo.height,      }  }    },     _type == 'media' => {     ...,         mediaType,    "image":{      ...image,      "desktopImage":{        "imageUrl": image.desktopImage.asset->url,        "imageDimensions": image.desktopImage.asset->metadata.dimensions      },      "mobileImage":{        "imageUrl": image.mobileImage.asset->url,        "imageDimensions": image.mobileImage.asset->metadata.dimensions      },    },    "video":{      ...video,      "desktopVideo":{        "videoUrl": video.desktopVideo.videoFile.asset->url,        "videoDimensions": {          "width":video.desktopVideo.width,          "height":video.desktopVideo.height,        }      },      "mobileVideo":{        "videoUrl": video.mobileVideo.videoFile.asset->url,        "videoDimensions": {          "width":video.mobileVideo.width,          "height":video.mobileVideo.height,        }      }    }    },    _type == 'titleAndDescription' => {     ...,       title,  description[]{    ...,      markDefs[]{    ...,       internalLink->{    "slug":slug.current  },  externalLink  }  },  cta{    ...,      ctaLabel,  ctaLink{      internalLink->{    "slug":slug.current  },  externalLink  },  ctaColour  }    }  },  metaData  }
export type HomePageQueryResult = {
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  date: string;
  slug: string | null;
  isHomePage: boolean | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    _key: string;
    _type: "customImage";
    desktopImage: {
      imageUrl: string | null;
      imageDimensions: SanityImageDimensions | null;
    };
    mobileImage: {
      imageUrl: string | null;
      imageDimensions: SanityImageDimensions | null;
    };
    caption: string | null;
    isLCP: boolean | null;
  } | {
    _key: string;
    _type: "customVideo";
    desktopVideo: {
      videoUrl: string | null;
      videoDimensions: {
        width: number | null;
        height: number | null;
      };
    };
    mobileVideo: {
      videoUrl: string | null;
      videoDimensions: {
        width: number | null;
        height: number | null;
      };
    };
    showMuteIcon?: boolean;
    cropVideoForMobile?: boolean;
  } | {
    _key: string;
    _type: "media";
    mediaType: "image" | "video" | null;
    image: {
      _type: "customImage";
      desktopImage: {
        imageUrl: string | null;
        imageDimensions: SanityImageDimensions | null;
      };
      mobileImage: {
        imageUrl: string | null;
        imageDimensions: SanityImageDimensions | null;
      };
      caption?: string;
      isLCP?: boolean;
    } | {
      desktopImage: {
        imageUrl: string | null;
        imageDimensions: SanityImageDimensions | null;
      };
      mobileImage: {
        imageUrl: string | null;
        imageDimensions: SanityImageDimensions | null;
      };
    };
    video: {
      _type: "customVideo";
      desktopVideo: {
        videoUrl: string | null;
        videoDimensions: {
          width: number | null;
          height: number | null;
        };
      };
      mobileVideo: {
        videoUrl: string | null;
        videoDimensions: {
          width: number | null;
          height: number | null;
        };
      };
      showMuteIcon?: boolean;
      cropVideoForMobile?: boolean;
    } | {
      desktopVideo: {
        videoUrl: string | null;
        videoDimensions: {
          width: number | null;
          height: number | null;
        };
      };
      mobileVideo: {
        videoUrl: string | null;
        videoDimensions: {
          width: number | null;
          height: number | null;
        };
      };
    };
  }> | null;
  metaData: PageMetaData | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"settings\"][0]": SettingsQueryResult;
    "*[_type == \"navigation\"][0]": NavigationQueryResult;
    "*[_type == \"footer\"][0]": FooterQueryResult;
    "\n  *[_type == \"page\" && isHomePage == true][0] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"date\": coalesce(date, _updatedAt),\n  \"slug\": slug.current,\n  isHomePage,\n  content[]{\n    ...,\n    _type == 'customImage' => {\n     ...,\n     \n     \"desktopImage\":{\n      \"imageUrl\": desktopImage.asset->url,\n      \"imageDimensions\": desktopImage.asset->metadata.dimensions\n  },\n  \"mobileImage\":{\n      \"imageUrl\": mobileImage.asset->url,\n      \"imageDimensions\": mobileImage.asset->metadata.dimensions\n  },\n  isLCP,\n  caption\n\n    },\n    _type == 'customVideo' => {\n     ...,\n     \n  \"desktopVideo\":{\n      \"videoUrl\": desktopVideo.videoFile.asset->url,\n      \"videoDimensions\": {\n          \"width\":desktopVideo.width,\n          \"height\":desktopVideo.height,\n      }\n  },\n  \"mobileVideo\":{\n     \"videoUrl\": mobileVideo.videoFile.asset->url,\n     \"videoDimensions\": {\n          \"width\":mobileVideo.width,\n          \"height\":mobileVideo.height,\n      }\n  }\n\n    },\n     _type == 'media' => {\n     ...,\n     \n    mediaType,\n    \"image\":{\n      ...image,\n      \"desktopImage\":{\n        \"imageUrl\": image.desktopImage.asset->url,\n        \"imageDimensions\": image.desktopImage.asset->metadata.dimensions\n      },\n      \"mobileImage\":{\n        \"imageUrl\": image.mobileImage.asset->url,\n        \"imageDimensions\": image.mobileImage.asset->metadata.dimensions\n      },\n    },\n    \"video\":{\n      ...video,\n      \"desktopVideo\":{\n        \"videoUrl\": video.desktopVideo.videoFile.asset->url,\n        \"videoDimensions\": {\n          \"width\":video.desktopVideo.width,\n          \"height\":video.desktopVideo.height,\n        }\n      },\n      \"mobileVideo\":{\n        \"videoUrl\": video.mobileVideo.videoFile.asset->url,\n        \"videoDimensions\": {\n          \"width\":video.mobileVideo.width,\n          \"height\":video.mobileVideo.height,\n        }\n      }\n    }\n\n    },\n    _type == 'titleAndDescription' => {\n     ...,\n     \n  title,\n  description[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n     \n  internalLink->{\n    \"slug\":slug.current\n  },\n  externalLink\n\n  }\n\n  },\n  cta{\n    ...,\n    \n  ctaLabel,\n  ctaLink{\n    \n  internalLink->{\n    \"slug\":slug.current\n  },\n  externalLink\n\n  },\n  ctaColour\n\n  }\n\n    }\n  },\n  metaData\n\n  }\n": HomePageQueryResult;
  }
}
